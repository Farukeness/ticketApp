@model TicketListViewModel
@{
ViewData["Title"] = "Biletler";
}
@{
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}


@(Html.Kendo().Grid<ticketApp.ViewModel.TicketViewModel>().Name("AdminTickets")
    .Columns(columns => {
        columns.Bound(c => c.Title);
        columns.Bound(c => c.Description);
        columns.Bound(c => c.ProjectName).EditorTemplateName("ProjectName").Filterable(f => f.Multi(true).Search(true));
        columns.Bound(c => c.ticketType).Filterable(f => f.Multi(true).Search(true));
        columns.Bound(c => c.ticketPriority).Filterable(f => f.Multi(true).Search(true));
        columns.Bound(c => c.ticketStatus).Filterable(f => f.Multi(true).Search(true))
        .ClientTemplate("<span id='badge_#=ticketStatus#' class='badgeTemplate' ></span>");
        columns.Bound(c => c.CreatedAt).Format("{0:dd//MM/yyyy HH:mm}");
        columns.Bound(c => c.CreatedByUserId).Filterable(f => f.Multi(true).Search(true));
        columns.Bound(c => c.AssignmentControl).Filterable(f => f.Multi(true).Search(true));
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(200);

        columns.Template("<button type='button' class='btn btn-primary' onclick='openModal(#=Id#)'>Geliştirici Ata</button>").Title("Geliştirici").HtmlAttributes(new {style ="color:white"});
    })
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Pageable()
    .Sortable()
    .Navigatable()
    .Filterable()
    .Scrollable()
    .Events(events => {events.DataBound("onDataBound"); events.Cancel("onGridCancel");})
    .DataSource(dataSource => dataSource
    .Ajax()
    .Events(events => events.RequestEnd("onRequestEnd"))
    .Model(model => {
        model.Id(p => p.Id);
        model.Field(p => p.CreatedAt).Editable(false);
        model.Field(p => p.ticketStatus).Editable(true);
        model.Field(p => p.CreatedByUserId).Editable(false);
        model.Field(p => p.AssignmentControl).Editable(false);
    })
    .Update(update => update.Action("EditUserInline", "Grid"))
    .Read(read => read.Action("Tickets_All","Grid"))
    .Destroy(destroy => destroy.Action("DestroyTicket_Admin","Grid"))
    .Sort(s => s.Add(p => p.CreatedAt).Descending())
    ))



<div class="modal fade "  tabindex="-1" id="myModal" aria-hidden="true" data-bs-backdrop="static" >
    <div class="modal-dialog modal-xl">
        <form asp-action="EditAssigned"  method="post" onsubmit="return handleFormSubmit(this);">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" >Geliştiriciler</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="ticketId" name="Id" value="">
               
                @(Html.Kendo().Grid<ModalView>().Name("ModalGrid")
                    .Pageable()
                    .Scrollable()
                    .Columns(column => {
                    column.Select().Width(75).HtmlAttributes(new { @class="checkbox-align"}).HeaderHtmlAttributes(new { @class = "checkbox-align" });
                    column.Bound(c => c.UserName).Title("Geliştiriciler");
                    
                    } )
                    .ToolBar(toolbar => toolbar.Search())
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .Read(read => read.Action("Developers","Grid").Data("getReadParameters"))
                    .Sort(s => s.Add(p => p.UserName)))
                    .AutoBind(false)
                    .Events(events => events.DataBound("onDataBound2"))
                    
                    )
                <div id="developersList">
                    
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-dark" data-bs-dismiss="modal" >İptal</button>
                <button type="submit" class="btn btn-success" data-bs-dismiss="modal" >Onayla</button>
                
            </div>
            </form>
        </div>
    </div>
</div>

<style>
.k-badge {
    font-size: 14px !important;
    padding: 6px 12px !important;
    font-weight: 500 !important;
}

.large-badge {
    font-size: 16px !important;
    padding: 8px 16px !important;
    font-weight: 600 !important;
}
</style>

<script>
function openModal(ticketId) {
    document.getElementById('ticketId').value = ticketId;
    var modal = new bootstrap.Modal(document.getElementById('myModal'));
    modal.show();
    var grid = $("#ModalGrid").data("kendoGrid")
    if (grid){
        grid.dataSource.read({Id: ticketId})
    }
}
function handleFormSubmit(form) {
    var grid = $("#ModalGrid").data("kendoGrid");
    var selectedIds = [];
    $(form).find('input[name="AssignedToUsers"]').remove();

    var selectedRows = grid.select();

    selectedRows.each(function () {
        var dataItem = grid.dataItem(this);
        selectedIds.push(dataItem.id);
    });
    selectedIds.forEach(function(id) {
        var hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'AssignedToUsers'; 
        hiddenInput.value = id;
        form.appendChild(hiddenInput);
    });
    return true;
}
function getReadParameters() {
    var ticketId = document.getElementById('ticketId').value;
    return {
        Id: ticketId
    };
}
function onGridCancel(e) {
    var grid = this;
    grid.refresh()
}

function onDataBound2(e) {
    var grid = this;
    grid.clearSelection();
    grid.tbody.find("tr").each(function() {
        var dataItem = grid.dataItem(this);
        var row = $(this);
        var checkbox = row.find(".k-checkbox");

        if (dataItem.isAssigned) {
            checkbox.prop("checked", true);
            
         
            grid.select(row);
            
            row.addClass("k-state-selected");
        } else {
            checkbox.prop("checked", false);
        }
    });
}

function onDataBound(e) {
        var grid = this;
        grid.table.find("tr").each(function () {
            var dataItem = grid.dataItem(this);
            var themeColor = dataItem.ticketStatus ? 'error' : 'success';
            var text = dataItem.ticketStatus ? 'Kapalı' : 'Açık';

            $(this).find(".badgeTemplate").kendoBadge({
            themeColor: themeColor,
            text: text,
            cssClass: "large-badge"
        });


            kendo.bind($(this), dataItem);
        });
    }
function onRequestEnd(e) {
    if (e.type === "update" && e.response) {
        toastr.success("Başarıyla güncellendi!");
    }
    if (e.type === "create" && e.response) {
        toastr.success("Başarıyla Eklendi!");
    }
}
</script>